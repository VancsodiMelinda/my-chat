{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","inbox","currentEmail","ws","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","email","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","focus","attrs","props","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","password","displayName","register","neptunCode","myInput","onClick","src","width","alt","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","myEmail","mySpan","Date","timeStamp","toLocaleTimeString","hasNumber","toLocaleDateString","selected","onSelect","name","content","m","forceUpdate","removeAllEventListener","myString","test","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","PureComponent","RightPane","newText","charAt","concat","toString","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4830a7e4.chunk.js","sourcesContent":["import {IncomingPacket} from \"./chat\";\r\nimport {OutgoingPacket} from \"./chat\";\r\nimport {InboxDto} from \"./chat\";\r\nimport {MessageDto} from \"./chat\";\r\nimport {EventProducer} from \"./EventProducer\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": ( channelId: string, message: MessageDto ) => void;\r\n    \"conversation\": ( channelId: string ) => void;\r\n    \"register\": () => void;\r\n}\r\n\r\n// 2.2 helyi adatbázis\r\nclass Proxy extends EventProducer<ProxyEventMap> \r\n{\r\n    inbox: InboxDto | null = null;\r\n    currentEmail: string = \"\";\r\n    private ws: WebSocket;\r\n    constructor()\r\n    {\r\n        super();\r\n        // create WebSocket connection\r\n        //this.ws = new WebSocket( \"ws://echo.websocket.org/\" );  // the URL to which to connect, the WebSocket server will respond to this URL\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );  // the URL to which to connect, the WebSocket server will respond to this URL\r\n        // connection opened\r\n        \r\n        this.ws.addEventListener( \"open\", () =>\r\n        {\r\n            //this.ws.send( \"Hello\" );  // method: enqueues data to be transmitted\r\n        } );\r\n        \r\n        // listen for messages\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type )\r\n            {\r\n                case \"error\":\r\n                    alert( p.message );\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push( p.conversation );\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        } );\r\n    }\r\n    \r\n    sendPacket( packet: OutgoingPacket )\r\n    {\r\n        this.ws.send( JSON.stringify( packet ) );\r\n        //console.log(\"Outgoing packet:\" + JSON.stringify( packet ));\r\n        switch (packet.type)\r\n        {\r\n            case \"login\":\r\n                this.currentEmail = packet.email;\r\n                break;\r\n            case \"register\":\r\n                this.currentEmail = packet.email;\r\n                break;\r\n        }\r\n    }\r\n}\r\nexport var proxy = new Proxy();","\r\n// 2.3 események publikálása\r\nexport class EventProducer<M>\r\n{\r\n    // array\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[K], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[K] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n\r\n    protected dispatch( type: string, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './TextInput.css' \r\n\r\n// 3.2 funkcionalitás kiemelése\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: ( value: string ) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    //state = { value: this.props.value, focus: false };  // szerintem ez nem jó, lásd hibaüzenet\r\n    // Warning: A component is changing an uncontrolled input of type text to be controlled.\r\n    //  Input elements should not switch from uncontrolled to controlled (or vice versa).\r\n\r\n    state = { value: '', focus: false };\r\n\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n        {\r\n            attrs.autoFocus = true;\r\n        }\r\n        if ( this.props.onEnter )\r\n        {\r\n            attrs.onKeyDown = e =>\r\n            {\r\n                if ( e.keyCode === 13 )\r\n                {\r\n                    this.props.onEnter!();\r\n                }\r\n            };\r\n        }\r\n        \r\n        return (\r\n            <div className=\"text-input\">\r\n                <input { ...attrs } type={ this.props.type ?? \"text\" } value={ this.state.value}\r\n                    onChange={ e =>\r\n                    {\r\n                        this.setState( { value: e.target.value } );\r\n                        this.props.onChange?.( e.target.value );\r\n                    } }\r\n                    onBlur={ () => this.setState( { focus: false } ) }\r\n                    onFocus={ () => this.setState( { focus: true } ) } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                    { this.props.placeholder }\r\n                </label>\r\n             </div> );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {proxy} from \"./Proxy\"\r\nimport {TextInput} from \"./TextInput\"\r\n\r\n// 3.1 első komponens létrehozása\r\nexport class Login extends Component\r\n{\r\n    //state = {email: \"\", password: \"\"};\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    neptunCode : string = \"CODE20\";\r\n    \r\n    /*\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" alt = \"description\" />\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"/#\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                { this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                        onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } /> }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email }\r\n                    onChange={ e => this.setState( { email: e } ) } onEnter={ () => this.onClick() } autofocus={ true } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password }\r\n                    onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }> { this.state.register ? \"Register\" : \"Login\" } </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div> );\r\n    }\r\n    */\r\n\r\n    render()\r\n    {\r\n        // 3.1.3. feladat\r\n        let myInput = <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } /> ;\r\n\r\n        if ((this.state.email === this.neptunCode) && this.state.register) {\r\n            myInput = <TextInput type=\"text\" placeholder=\"Your display name: Meli\" value={ this.state.displayName }\r\n                onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } />;\r\n\r\n            //this.state.displayName = \"Meli\";\r\n            //myInput = <input type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                //onChange={ e => this.setState( { displayName: e } ) } />;\r\n            //console.log(\"HAHO: \" + this.state.displayName);\r\n        }\r\n\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" alt = \"description\" />\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"/#\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                { this.state.register && myInput }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email }\r\n                    onChange={ e => this.setState( { email: e } ) } onEnter={ () => this.onClick() } autofocus={ true } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password }\r\n                    onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }> { this.state.register ? \"Register\" : \"Login\" } </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div> );\r\n    }\r\n    \r\n\r\n    onClick()\r\n    {\r\n        if ( this.state.register )\r\n        {\r\n            if (this.state.email === this.neptunCode)\r\n                proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password, displayName: \"Meli\", staySignedIn: false } );\r\n            else\r\n                proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false } );\r\n        }\r\n        else\r\n        {   \r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false } );\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport {TextInputOptions} from \"./TextInput\";\r\nimport {TextInput} from \"./TextInput\";\r\n\r\n// 3.3 gyerek komponens funkcionalitásának publikálása\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    \r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n        {\r\n            this.textInput.current?.setState( { value: \"\" } );\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {ConversationDto} from \"./chat.d\";\r\nimport {proxy} from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n    }>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n\r\n        // 3.5.2. feladat\r\n        let myEmail = proxy.currentEmail;\r\n        let mySpan = <span className=\"time\"> { lastMessage && new Date( lastMessage.timeStamp ).toLocaleTimeString() } </span>;\r\n        if (this.hasNumber(myEmail)){\r\n            mySpan = <span className=\"time\"> { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() } </span>;\r\n        }\r\n        /*\r\n        console.log(myEmail);\r\n        let stuff = <span className=\"time\"> { lastMessage && new Date( lastMessage.timeStamp ).toLocaleTimeString() } </span>;\r\n        if (myEmail)\r\n        {\r\n            console.log(\"TEST: \" + this.hasNumber(myEmail));\r\n            if (this.hasNumber(myEmail)){\r\n                stuff = <span className=\"time\"> { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() } </span>;\r\n            }\r\n        }\r\n        */\r\n        /*\r\n        return (\r\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n                onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    <span className=\"time\">\r\n                        { lastMessage && new Date( lastMessage.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n        */\r\n        return (\r\n            <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n                onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    {mySpan}\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n            if ( cid === this.props.conversation.channelId )\r\n                this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    hasNumber(myString: string)\r\n    {\r\n        return /\\d/.test(myString);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from \"./chat.d\";\r\nimport {InboxDto} from \"./chat.d\";\r\nimport {proxy} from \"./Proxy\";\r\nimport {TextInputAndButton} from \"./TextInputAndButton\";\r\nimport {ConversationCard} from \"./ConversationCard\";\r\n\r\n// 3.5.1 listák és külső események\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void\r\n    }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n        <div className=\"left-pane\">\r\n            <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n            <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                buttonContent=\"Inv\"\r\n                onClick={ text => this.sendContactRequest( text ) } />\r\n            <div className=\"conversations\">\r\n                { this.props.inbox.conversations.map( x =>\r\n                    <ConversationCard\r\n                        key={ x.channelId }\r\n                        conversation={ x }\r\n                        selected={ x === this.props.selectedConversation }\r\n                        onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest( email: string )\r\n    {\r\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}\r\n    ","import React, {PureComponent} from 'react';\r\nimport {MessageDto} from \"./chat.d\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    /*\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                        { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    */\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                        { new Date().toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from \"./chat.d\";\r\nimport {proxy} from \"./Proxy\";\r\nimport {TextInputAndButton} from \"./TextInputAndButton\";\r\nimport {MessageCard} from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n            if ( cid === this.props.conversation?.channelId )\r\n                this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    onSend( text: string )\r\n    {\r\n        // 3.6. feladat\r\n        let myEmail : string = proxy.currentEmail;\r\n        let firstChar = myEmail.charAt(0);\r\n        //console.log(\"first char of email: \" + firstChar);\r\n        let newText : string = firstChar.concat(\": \",text.toString());\r\n        //console.log(newText);\r\n\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: newText } );\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {   \r\n        return (\r\n            <div className=\"right-pane column\">\r\n                { this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={ () => this.props.onBack() }>Back</button>\r\n                            <p>{ this.props.conversation?.name }</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            { this.props.conversation?.lastMessages.map( x =>\r\n                                <MessageCard key={ x.id } message={ x }\r\n                                    own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n        \r\n        \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {ConversationDto} from \"./chat.d\";\r\nimport {proxy} from \"./Proxy\";\r\nimport {LeftPane} from \"./LeftPane\";\r\nimport {RightPane} from \"./RightPane\";\r\n\r\n// 3.4 alkalmazés felülete\r\nexport class Main extends Component\r\n{\r\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\n    \r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React, {Component} from 'react';\nimport {Login} from \"./Login\";\nimport {Main} from \"./Main\";\nimport {proxy} from \"./Proxy\"\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n\n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => this.setState( { showLogin: false } ) );\n  }\n\n  render()\n  {\n    return (\n      <div className=\"app\">\n        { this.state.showLogin ? <Login /> : <Main /> }\n      </div>\n    );\n  }\n}\n\n// { this.state.showLogin ? <Login /> : <Main /> }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n//serviceWorker.unregister();"],"sourceRoot":""}